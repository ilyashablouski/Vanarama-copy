// defines the global color variable classes

// colour & shader mixin
@mixin create-colour($colour, $contrast) {
  --class-color-contrast: #{$contrast};
  --class-color-tint: #{lighten($colour, $tint)};
  --class-color: #{$colour};
  --class-color-shade: #{darken($colour, $shade)};
  --class-color-focus: #{rgba($colour, $focus-opacity)};
}

// colour list
$clrs: (
        teal: $teal,
        orange: $orange,
        sky: $sky,
        black: $black,
        white: $white,
);
$cont: (
        dark: (
                contrast: $lighter,
                colour: $dark,
        ),
        darker: (
                contrast: $lighter,
                colour: $darker,
        ),
        medium: (
                contrast: $black,
                colour: $medium,
        ),
        light: (
                contrast: $darker,
                colour: $light,
        ),
        lighter: (
                contrast: $darker,
                colour: $lighter,
        ),
);

// default colour creator
@each $name, $vrb in $clrs {
  .-#{$name} {
    @include create-colour($vrb, $white);
  }
}

// iterate through all colors and create global utility classes
@each $contrast, $set in $cont {
  $set-contrast: map-get(map-get($cont, $contrast), contrast);
  $set-colour: map-get(map-get($cont, $contrast), colour);

  .-#{$contrast} {
    @include create-colour($set-colour, $set-contrast);
  }
}

/// @deprecated
// primary & secondary seletor for colours
@mixin colour-selector($selector, $colour, $type) {
  @if $type==contrast {
    $set-contrast: map-get(map-get($cont, $colour), contrast);
    $set-colour: map-get(map-get($cont, $colour), colour);

    &.#{$selector} {
      @include create-colour($set-colour, $set-contrast);
    }
  } @else {
    &.#{$selector} {
      @include create-colour($colour, $white);
    }
  }
}

// semantic colors

// success color (green)
.-success {
  --class-color-contrast: #{$white};
  --class-color-tint: #{lighten($green, $tint)};
  --class-color: #{$green};
  --class-color-shade: #{darken($green, $shade)};
  --class-color-focus: #{rgba($green, $focus-opacity)};
}

// warning color (yellow)
.-warning {
  --class-color-contrast: #{$black};
  --class-color-tint: #{lighten($yellow, $tint)};
  --class-color: #{$yellow};
  --class-color-shade: #{darken($yellow, $shade)};
  --class-color-focus: #{rgba($yellow, $focus-opacity)};
}

// danger color (red)
.-danger {
  --class-color-contrast: #{$white};
  --class-color-tint: #{lighten($red, $tint)};
  --class-color: #{$red};
  --class-color-shade: #{darken($red, $shade)};
  --class-color-focus: #{rgba($red, $focus-opacity)};
}

// disabled color (light)
.-disabled {
  --class-color-contrast: #{$dark};
  --class-color-tint: #{lighten($light, $tint)};
  --class-color: #{$light};
  --class-color-shade: #{darken($light, $shade)};
  --class-color-focus: #{rgba($light, $focus-opacity)};
}

// inherit color utility class
.-inherit {
  --class-color-contrast: inherit;
  --class-color-tint: inherit;
  --class-color: inherit;
  --class-color-shade: inherit;
  --class-color-focus: inherit;
}
