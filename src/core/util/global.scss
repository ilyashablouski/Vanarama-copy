// global inheritable defaults

html {
  -moz-tab-size: 4;
  tab-size: 4;
  font-size: 16px;
  box-sizing: border-box;
  scroll-behavior: smooth;
  background-color: white;
}

body {
  @include body-font-face-fallback;

  // font smoothing
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: geometricPrecision;

  // font ligatures etc.
  font-feature-settings: 'swsh' 1, 'calt' 1, 'liga' 1, 'kern' 1;

  // general typography
  font-family: $font-family-body;
  font-size: $font-size-400;
  word-break: normal;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  color: $darker;
  background-color: white;

  // this class prevents scrolling
  // used while modal windows are open or when the Header menu is open
  &.-lock {
    max-width: 100vw;
    max-height: 100vh;
    overflow: hidden;
  }

  // utility class for positioning groups of adjacent Buttons
  .button-group {
    $button-group-gap: 3px;
    display: flex;
    align-items: center;
    position: relative;
    left: -$button-group-gap;
    right: -$button-group-gap;

    > * {
      margin: $button-group-gap;
    }

    @include mobile {
      flex-wrap: wrap;
    }
  }
}

main {
  padding-top: 0;
  @include mobile-tablet {
    padding-top: 104px;
  }
}

/// @deprecated
.clearfix {
  clear: both;
  display: block;
}

// text selection highlight color
::selection {
  background-color: rgba($teal, $opacity-200);
}

// adds a default gap between adjacent text blocks
.text + .text {
  margin-top: var(--owl-gap, #{$rem-400});
}

// adds a default gap between headings and text blocks
.heading:not(.-xlarge) + p.text,
p.text + .heading {
  margin-top: var(--owl-gap, #{$rem-400});
}

// adds spacing between adjacent children
.-distribute-content {
  > * + * {
    margin-top: $rem-400;
  }
}

// centers children with flex-wrapping and spacing
.-justify-content-dense {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: flex-start;
  max-width: $vp-small;
  margin: auto;
  padding: $rem-200;

  > * {
    margin: $rem-200;
  }
}

// as above, but in a row
.-justify-content-row {
  display: flex;
  justify-content: center;
  align-items: flex-start;
  max-width: $vp-small;
  margin: auto;
  padding: 0 $rem-200;

  > * {
    margin: 0 $rem-200;
  }
}

// default <hr /> styling
hr {
  background: linear-gradient(
    to top,
    $border-color,
    $border-color 0.5px,
    transparent 0.5px,
    transparent
  );
  border: 0;
  height: 1px;
  width: 100%;
  margin: 0;
  padding: 0;
  max-width: $measure;
  mix-blend-mode: luminosity;

  &.-fullwidth {
    max-width: unset;
  }
}

// spacing utility classes:

// -pt-* padding-top
// -pr-* padding-right
// -pb-* padding-bottom
// -pl-* padding-left
// -pv-* padding (vertical)
// -ph-* padding (horizontal)
// -p-*  padding (all)

$rem-list: 0rem, $rem-100, $rem-200, $rem-300, $rem-400, $rem-500, $rem-600,
  $rem-700;

@for $i from 1 through 7 {
  $n: $i - 1;

  // padding utility class

  .-pt-#{$n}00 {
    padding-top: nth($rem-list, $i) !important;
  }
  .-pb-#{$n}00 {
    padding-bottom: nth($rem-list, $i) !important;
  }
  .-pr-#{$n}00 {
    padding-right: nth($rem-list, $i) !important;
  }
  .-pl-#{$n}00 {
    padding-left: nth($rem-list, $i) !important;
  }
  .-pv-#{$n}00 {
    padding-top: nth($rem-list, $i) !important;
    padding-bottom: nth($rem-list, $i) !important;
  }
  .-ph-#{$n}00 {
    padding-right: nth($rem-list, $i) !important;
    padding-left: nth($rem-list, $i) !important;
  }
  .-p-#{$n}00 {
    padding-top: nth($rem-list, $i) !important;
    padding-bottom: nth($rem-list, $i) !important;
    padding-right: nth($rem-list, $i) !important;
    padding-left: nth($rem-list, $i) !important;
  }

  // margin utility class

  .-mt-#{$n}00 {
    margin-top: nth($rem-list, $i) !important;
  }
  .-mb-#{$n}00 {
    margin-bottom: nth($rem-list, $i) !important;
  }
  .-mr-#{$n}00 {
    margin-right: nth($rem-list, $i) !important;
  }
  .-ml-#{$n}00 {
    margin-left: nth($rem-list, $i) !important;
  }
  .-mv-#{$n}00 {
    margin-top: nth($rem-list, $i) !important;
    margin-bottom: nth($rem-list, $i) !important;
  }
  .-mh-#{$n}00 {
    margin-right: nth($rem-list, $i) !important;
    margin-left: nth($rem-list, $i) !important;
  }
  .-m-#{$n}00 {
    margin-top: nth($rem-list, $i) !important;
    margin-bottom: nth($rem-list, $i) !important;
    margin-right: nth($rem-list, $i) !important;
    margin-left: nth($rem-list, $i) !important;
  }

  // negative margin utility class

  .-mt--#{$n}00 {
    margin-top: nth($rem-list, $i) * -1 !important;
  }
  .-mb--#{$n}00 {
    margin-bottom: nth($rem-list, $i) * -1 !important;
  }
  .-mr--#{$n}00 {
    margin-right: nth($rem-list, $i) * -1 !important;
  }
  .-ml--#{$n}00 {
    margin-left: nth($rem-list, $i) * -1 !important;
  }
  .-mv--#{$n}00 {
    margin-top: nth($rem-list, $i) * -1 !important;
    margin-bottom: nth($rem-list, $i) * -1 !important;
  }
  .-mh--#{$n}00 {
    margin-right: nth($rem-list, $i) * -1 !important;
    margin-left: nth($rem-list, $i) * -1 !important;
  }
  .-m--#{$n}00 {
    margin-top: nth($rem-list, $i) * -1 !important;
    margin-bottom: nth($rem-list, $i) * -1 !important;
    margin-right: nth($rem-list, $i) * -1 !important;
    margin-left: nth($rem-list, $i) * -1 !important;
  }
}

.-flex {
  display: flex;
}

/// horizontal flex utility class
.-flex-h {
  display: flex !important;
  justify-content: space-between;
  align-items: center;
}

/// @deprecated
// built for a specific use-case, not sure it's needed
.-flex-row {
  display: flex;
  justify-content: flex-start;
  align-items: center;

  > .text {
    margin-top: 0;
  }

  > * + * {
    margin-left: 0.5ch;
  }

  &.btn {
    @include mobile {
      flex-direction: column;
      align-items: flex-start;

      > * + * {
        margin-left: 0;
        margin-top: 0.5ch;
      }
    }
  }
}

/// vertical flex utility class
.-flex-v {
  display: flex !important;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

/// @deprecated
// built for a specific use-case, not sure it's needed
.-mobile-row {
  display: grid;
  overflow: hidden;
  overflow-x: scroll;
  grid-auto-flow: column;
  grid-template-columns: 40vw;
  gap: $rem-200;
  margin-left: -$rem-400;
  margin-right: -$rem-400;
  position: relative;
  background: $light;
  padding: $rem-400;

  @media (min-width: $vp-small) {
    display: none;
  }

  > * {
    min-width: 40vw;
    cursor: grab;
    background: $white;
    padding: $rem-300 2ch;
    box-shadow: $box-shadow-small;
    border-radius: $border-radius-small;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  &:after {
    content: '';
    display: block;
    width: $rem-400 - $rem-200;
    min-height: $rem-400;
  }
}

/// @deprecated
// built for a specific use-case, not sure it's needed
.-row {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: minmax(0, max-content);
  place-items: center start;
  gap: 1ch;
  min-width: 0;

  @media (max-width: $vp-medium) {
    grid-auto-flow: row;
    grid-template-columns: unset;
    grid-template-rows: max-content;
  }

  &-mobile {
    @media (max-width: $vp-small) {
      grid-auto-flow: column;
      grid-auto-columns: max-content;
    }
  }
}

// for distributing icons in a row
.-icon-row {
  display: grid;
  min-width: 0;
  grid-auto-flow: column;
  grid-auto-columns: minmax(auto, max-content);
  gap: 1ch;
}

// distributes children with a gap from the $rem series of spaces
.-col {
  > *:not(:last-child),
  &-400 > *:not(:last-child) {
    margin-bottom: $rem-400 !important;
  }

  &-100 > *:not(:last-child) {
    margin-bottom: $rem-100 !important;
  }

  &-200 > *:not(:last-child) {
    margin-bottom: $rem-200 !important;
  }

  &-300 > *:not(:last-child) {
    margin-bottom: $rem-300 !important;
  }

  &-500 > *:not(:last-child) {
    margin-bottom: $rem-500 !important;
  }

  > .text {
    display: block;
  }
}

// margin-horizontal auto
.-mh-auto {
  margin-right: auto !important;
  margin-left: auto !important;
}

.-self-align-center {
  align-self: center !important;
}

.-self-justify-center {
  justify-self: center !important;
}

// adds a <hr /> style border
.va-hr {
  border-top: 1px solid $lighter;
}

// alignment classes

.-a-start {
  align-self: flex-start;
}

.-a-end {
  align-self: flex-end;
}

.-a-left {
  text-align: left;
}

.-a-right {
  text-align: right;
}

.-a-center {
  text-align: center;
}

.-a-middle {
  vertical-align: middle;
}

// placement classes

.-place-center {
  place-items: center;
}

.-self-place-center {
  place-self: center;
}

// display classes

.-d-block {
  display: block !important;
}

.-d-inline-block {
  display: inline-block !important;
}

.-d-inline {
  display: inline !important;
}

// height classes

.-h-auto {
  height: auto !important;
}

.-h-content {
  height: max-content !important;
}

// background-color classes
@each $color in $colors {
  .-bg-#{map-get($color, 'name')} {
    background: map-get($color, 'color');
  }
}

// position classes

.-p-relative {
  position: relative;
}

// specific use-case quote styling
.quote {
  background: #45596b;
  position: relative;
  color: white;
  gap: 1.5rem;

  &--text:before,
  &--text:after {
    font-size: 2.5rem;
    font-weight: 700;
    color: #677b8d;
  }

  &--text {
    display: grid;
    grid-template-columns: 1.5rem auto 1.5rem;
    gap: 1ch;
    font-style: italic;
    border-top: 1px solid #677b8d;
    border-bottom: 1px solid #677b8d;
    padding: 1rem 0;
  }

  &--text:before {
    content: '“';
    place-self: start;
  }

  &--text:after {
    content: '”';
    place-self: end;
  }
}

// viewport / media query targeted display classes

// vp-max:small - hide above $vp-small
// vp-max:medium - hide above $vp-medium
// vp-max:large - hide above $vp-large

// vp-min:small - hide below $vp-small
// vp-min:medium - hide below $vp-medium
// vp-min:large - hide below $vp-large

.-vp {
  &-max {
    &\:small {
      @media (min-width: $vp-small) {
        display: none !important;
      }
    }

    &\:medium {
      @media (min-width: $vp-medium) {
        display: none !important;
      }
    }

    &\:large {
      @media (min-width: $vp-large) {
        display: none !important;
      }
    }
  }

  &-min {
    &\:small {
      @media (max-width: $vp-small) {
        display: none !important;
      }
    }

    &\:medium {
      @media (max-width: $vp-medium) {
        display: none !important;
      }
    }

    &\:large {
      @media (max-width: $vp-large) {
        display: none !important;
      }
    }
  }
}

/// @deprecated
.tilebox {
  border: 1px solid $border-color;
  border-bottom: 2px solid $border-color;
  background: $white;
  position: relative;

  &--button {
    position: absolute;
    top: 0;
    right: 0;
    min-height: 2.5rem;
  }
}

// prevents element from exceeding $measure in width
.-measure {
  max-width: $measure;
}

// sensible max-width for text and headings inside an article
.-article {
  .text,
  .heading {
    max-width: $measure;
  }
}

// splits a text block two columns with a border between
.-text-columns {
  -webkit-columns: 2 35ch;
  -moz-columns: 2 35ch;
  columns: 2 35ch;
  -webkit-column-gap: $rem-400 * 2;
  -moz-column-gap: $rem-400 * 2;
  column-gap: $rem-400 * 2;

  &.-column-rule {
    -webkit-column-rule: 1px solid $light;
    -moz-column-rule: 1px solid $light;
    column-rule: 1px solid $light;
    -webkit-column-gap: $rem-400 * 4;
    -moz-column-gap: $rem-400 * 4;
    column-gap: $rem-400 * 4;
  }
}

/// @deprecated
.search-tags {
  margin: -$rem-100;
  display: flex;
  flex-wrap: wrap;

  @media (max-width: $vp-small) {
    flex-wrap: nowrap;
    flex-direction: column;
    > * {
      flex-grow: 1;
      max-width: 100% !important;
      margin: $rem-100;
    }
  }

  @media (min-width: $vp-small) {
    > * {
      flex-grow: 1;
      min-width: max-content;
      width: 22%;
      max-width: 100% !important;
      margin: $rem-100;
    }
  }
}

/// @todo: investigate this - not sure what it does
.homepage-accordion {
  .tabs__list-wrap {
    background: transparent;
  }
}

// specific use-case class for the PDP pages I believe, ought to be refactored
.accessory {
  display: grid;
  grid-template-columns: minmax(0, 2fr) minmax(0, 3fr);
  gap: $rem-500;
  --owl-gap: 0;
  @include mobile {
    grid-template-columns: 1fr;
    gap: $rem-300;
  }

  .list {
    font-size: 0.875rem;
    gap: 0.25rem;
  }

  .price {
    font-size: 2rem;
  }

  &--gallery {
    display: grid;
    grid-template-columns: repeat(4, minmax(0, 1fr));
    gap: 2px;

    > :first-child {
      grid-column: 1 / -1;
    }
  }

  > * {
    @include owl(0.5rem);

    &:last-child {
      @include mobile {
        order: -1;
      }
    }
  }
}

// simple bold class
.-b {
  font-weight: 600 !important;
}
// simple medium class
.-m {
  font-weight: 500 !important;
}

// simple italics class
.-i {
  font-style: italic !important;
}

/// @todo: merge with main accordion component
.tile--accordion {
  border: 1px solid $border-color;
  border-bottom: 2px solid $border-color;
  background: $white;
  padding-top: $rem-400;

  > .heading {
    @include padding-inline($rem-400);
  }

  > .accordion {
    margin-top: $rem-400;
    border-top: 2px solid $border-color;
  }
}

// |<------------------ LEFT ELEMENT ------------------>|<--- RIGHT ELEMENT --->|
.-stretch-left {
  display: grid;
  grid-template-columns: minmax(0, 1fr) minmax(0, max-content);
  gap: $rem-400;
  place-items: center stretch;

  @include mobile {
    grid-template-columns: minmax(0, 1fr);
    grid-template-rows: auto;
  }
}

// |<--- LEFT ELEMENT --->|<------------------ RIGHT ELEMENT ------------------>|
.-stretch-right {
  display: grid;
  grid-template-columns: minmax(0, max-content) minmax(0, 1fr);
  gap: $rem-400;
  place-items: center stretch;

  @include mobile {
    grid-template-columns: minmax(0, 1fr);
    grid-template-rows: auto;
  }
}

// styling for the global cookies bar
.cookies {
  position: fixed;
  display: flex;
  justify-content: space-between;
  align-items: center;
  bottom: 0;
  width: 100vw;
  background: $orange;
  left: 0;
  color: $white;
  padding: $rem-400 $rem-500;
  z-index: 999999;

  @include mobile {
    flex-direction: column;
    padding: $rem-400;
    text-align: center;
  }

  > span {
    margin-bottom: $rem-400;
  }

  > div {
    display: flex;
  }

  > div > * + * {
    margin-left: 1ch;
  }

  &:not(.-open) {
    display: none;
  }
}

// 100% width utility
.full-width {
  width: 100%;
}

.-w-200 {
  width: 200px;
  max-width: 100%;
}

.-w-300 {
  width: 300px;
  max-width: 100%;
}

// 100% height utility
.full-height {
  height: 100%;
}

.-h-300 {
  height: 300px;
  max-height: 100%;
}

.-h-400 {
  height: 400px;
  max-height: 100%;
}

.-h-600 {
  height: 600px;
  max-height: 100%;
}

/// @deprecated
.-truncate {
  overflow-y: hidden;
  position: relative;

  &:before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    transform: translateZ(0);
    background-repeat: no-repeat;
    background-size: 200% 200%;
    background: linear-gradient(
      to top,
      #fff 0,
      hsla(0, 0%, 100%, 0.7) 8px,
      hsla(0, 0%, 100%, 0.45) 14px,
      hsla(0, 0%, 100%, 0.3) 19px,
      hsla(0, 0%, 100%, 0.26) 21px,
      hsla(0, 0%, 100%, 0.19) 25px,
      hsla(0, 0%, 100%, 0.12) 29px,
      hsla(0, 0%, 100%, 0.06) 32px,
      hsla(0, 0%, 100%, 0.03) 34px,
      hsla(0, 0%, 100%, 0.02) 36px,
      hsla(0, 0%, 100%, 0.008) 38px,
      hsla(0, 0%, 100%, 0.002) 39px,
      hsla(0, 0%, 100%, 0) 40px
    );
  }
}
