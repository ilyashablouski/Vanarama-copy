name: release-workflow

env:
  APP: cap-gql
  STACK: grid
  ECR_REGION: eu-west-2
  ENVIRONMENT: uat
  BUILD_ENV_EXEC_S3_PATH: https://build-env-var.s3.eu-west-2.amazonaws.com/build-env-var.linux-amd64

on:
  push:
    branches:
      - release-candidate

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  init:
    runs-on: ubuntu-latest
    # These permissions are required to use Github OIDC.
    permissions:
      id-token: write
      contents: read    
    
    steps:
      # Uses OIDC to assume the role in AWS rather than maintaining AWS credentials 
      # in Github. There is a corresponding OIDC provider in IAM setup to receive tokens
      # from Github. See https://github.com/aws-actions/configure-aws-credentials#assuming-a-role
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.ECR_REGION }}
          role-to-assume: ${{ secrets.GRID_UAT_GHA_ACTION_ROLE }}          
      - uses: aws-actions/amazon-ecr-login@v1
      - name: Create repository if not exists
        if: ${{ github.event.inputs.force_rebuild != 'true' }}
        run: aws ecr describe-repositories --repository-names ${{ env.APP }} --region ${{ env.ECR_REGION }} || aws ecr create-repository --repository-name ${{ env.APP }} --region ${{ env.ECR_REGION }}

  set-env:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create-tag.outputs.tag }}
    steps:
      - id: create-tag
        run: |
          github_sha=${{ github.sha }}
          github_sha_short=$(git rev-parse --short "$github_sha")
          tag="release-${github_sha_short}"
          echo "tag"
          echo $tag
          echo "::set-output name=tag::$tag"

  ci:
    uses: Autorama/autorama-reusable-github-workflows/.github/workflows/ci-nodejs-workflow.yml@master
    with:
      env: uat
      app: cap-gql
      stack: grid
      ecr_region: eu-west-2
    secrets:
      aws_actions_role: ${{ secrets.GRID_UAT_GHA_ACTION_ROLE }}

  sonarcloud-scan:
    needs: [ ci ]
    uses: Autorama/autorama-reusable-github-workflows/.github/workflows/ci-nodejs-sonarcloud-workflow.yml@master
    secrets:
      grid_github_token: ${{ secrets.GITHUB_TOKEN }}
      grid_sonar_token: ${{ secrets.GRID_SONAR_CLOUD_TOKEN }}

  fossa-scan:
    uses: Autorama/autorama-reusable-github-workflows/.github/workflows/ci-fossa-scan.yml@master
    with :
      ref: ${{ github.head_ref }}
    secrets:
      fossa-api-key: ${{ secrets.GRID_FOSSA_API_KEY }}

  package:
    uses: Autorama/autorama-reusable-github-workflows/.github/workflows/nodejs-build-workflow.yml@master
    needs: [init, set-env]
    with:
      env: uat
      app: next-storefront
      stack: grid
      ecr_region: eu-west-2
      build_env_exec_s3_path: https://build-env-var.s3.eu-west-2.amazonaws.com/build-env-var.linux-amd64
      tag: ${{ needs.set-env.outputs.tag }}
      github_sha: ${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ ci, package ]
    steps:
      - name: Start deployment
        id: deployment
        uses: avakar/create-deployment@v1
        with:
          auto_merge: false
          environment: ${{ env.ENVIRONMENT }}
          required_contexts: ""
          payload: '{"tag":"${{ needs.package.outputs.tag }}"}'
        env:
          GITHUB_TOKEN: ${{ secrets.GRID_GIT_TOKEN }}
      - name: Trigger deployment
        id: deployments
        uses: docker://techamigos/harness-cd-invoker:latest
        with: 
          APPLICATION_ID: ${{ secrets.GRID_PLATFORM_HARNESS_APP_ID }}
          HARNESS_ENDPOINT: ${{ secrets.GRID_HARNESS_ENDPOINT }}
          HARNESS_API_KEY: ${{ secrets.GRID_HARNESS_API_KEY }}
          SERVICE_NAME: ${{ env.APP }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          WORKFLOW_OR_PIPELINE_NAME: ecs-apps-deploy-release-candidate
          DEPLOYMENT_ID: ${{ steps.deployment.outputs.deployment_id }}
          GITHUB_SHA: ${{ github.sha }}
          FEATURE_PREFIX: ""
          PR_NUMBER: ""
          DEBUG_WF: false
          EXECUTION_TYPE: PIPELINE
          ARTEFACT_ID: ${{ needs.package.outputs.tag }}
      - name: Harness workflow or pipeline outcome
        if: ${{ steps.deployments.outputs.execution_status == 'RUNNING' }} | ${{ steps.deployments.outputs.execution_status == 'PAUSED' }}
        run: |
          echo "Deployment id: ${{ steps.deployment.outputs.deployment_id }}"
  tag-uat-release:
    runs-on: ubuntu-latest
    needs: [ package, deploy ]
    env:
      GITHUB_TOKEN: ${{ secrets.GRID_GIT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: release-candidate
      - name: Push release Tag
        run: |
          git config user.email devops@techamigos.com
          git config user.name 'devops'
          git tag -a ${{ needs.package.outputs.tag }} -m "Tagging a New UAT Release"
          git push origin ${{ needs.package.outputs.tag }}
