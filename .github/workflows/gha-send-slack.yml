name: gha-send-slack

env:
  APP: cap-gql
  ECR_REGION: eu-west-2
on:
  deployment_status:

jobs:
  gha-send-slack:
    if: ${{ ( github.event.deployment_status.state == 'success' || github.event.deployment_status.state == 'failure' ) && github.event.deployment.payload.tag != '' }}
    runs-on: ubuntu-latest
    # These permissions are required to use Github OIDC.
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.ECR_REGION }}
          role-to-assume: ${{ secrets.GRID_UAT_GHA_ACTION_ROLE }}

      - uses: aws-actions/amazon-ecr-login@v1

      - name: set environment variables
        id: variables
        run: |
          #fetch deployment information 
          echo ::set-output name=deployment_id::${{ github.event.deployment.id }}
          echo ::set-output name=status::${{ github.event.deployment_status.state }}
          echo ::set-output name=branch::${{ github.event.deployment.ref }}
          echo ::set-output name=sha::${{ github.event.deployment.sha }}
          echo ::set-output name=repo::${{ github.event.deployment.repository_url }}
          echo ::set-output name=tag::${{ github.event.deployment.payload.tag }}
          echo ::set-output name=environment::${{ github.event.deployment.environment }}
          environment=${{ github.event.deployment.environment }}
          environment_screaming_snake_case=$(echo $environment | tr '[:lower:]' '[:upper:]')
          environment_screaming_snake_case=${environment_screaming_snake_case//-/_}
          
          #setting slack webhook url
          slack_webhook_url_secret_name="GRID_${environment_screaming_snake_case}_DEPLOYMENTS_SLACK_WEBHOOK"
          echo "::set-output name=slack_webhook_url_secret_name::${slack_webhook_url_secret_name}"
      - name: get jira ticket's
        id: ticket
        run: |
            export GITHUB_API_URL=${{ steps.variables.outputs.repo }}
            export ARTIFACT_TAG=${{ steps.variables.outputs.tag }}
            export GITHUB_PAT=${{secrets.GRID_GIT_TOKEN}}
            export JIRA_API_TOKEN=${{ secrets.GRID_JIRA_API_TOKEN }}
            export AWS_REGION=${{ env.ECR_REGION }}
            export ECR_REPOSITORY_NAME=${{ env.APP }}
            source .github/workflows/scripts/ticket-collection.sh
            echo ::set-output name=ticket::$JIRA_TICKETS_STRING
            
      - name: set slack badge color
        if: ${{ steps.variables.outputs.status == 'success' || steps.variables.outputs.status == 'failure' }}
        id: badge 
        run: |
          if [[ ${{ steps.variables.outputs.status }} == 'success'   ]]; then
            badge="good"
          else 
            badge="danger"
          fi
          echo "###[set-output name=badge]$badge"
      - name: Send Slack message
        if: ${{ steps.variables.outputs.status == 'success' || steps.variables.outputs.status == 'failure' }}
        id: slack
        uses: slackapi/slack-github-action@v1.16.0
        with:
          payload: |
            {
              "text": "Deployment ${{ steps.variables.outputs.status }}",
                "attachments": [
                    {
                        "fields": [
                            { "title": "Application", "value": "${{ env.APP }}", "short": false },
                            { "title": "Jira references", "value": "${{steps.ticket.outputs.ticket}}", "short": false }
                        ],
                        "color": "${{ steps.badge.outputs.badge }}"
                    }
                ]
              }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets[steps.variables.outputs.slack_webhook_url_secret_name] }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK