# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AddressType {
    city: String!
    country: String!
    county: String
    createdAt: DateTime
    endedOn: Date
    kind: String
    lineOne: String!
    lineThree: String
    lineTwo: String
    partyId: ID!
    postcode: String!
    propertyStatus: String
    serviceId: ID
    startedOn: Date
    updatedAt: DateTime
    uuid: ID!
}

type AddressV2Type {
    city: String!
    country: String
    county: String
    endedOn: Date
    kind: String
    lineOne: String!
    lineThree: String
    lineTwo: String
    postcode: String!
    propertyStatus: String
    serviceId: ID
    startedOn: Date
    uuid: ID
}

"Aggregation fields"
type AggregationFieldType {
    docCount: Int
    key: String
}

"Aggregation types"
type AggregationListType {
    availability: [AggregationFieldType!]
    capBodyStyle: [AggregationFieldType!]
    doors: [AggregationFieldType!]
    financeType: [AggregationFieldType!]
    fuelType: [AggregationFieldType!]
    initialPayment: [AggregationFieldType!]
    initialPeriod: [AggregationFieldType!]
    lqBodyStyle: [AggregationFieldType!]
    manufacturerName: [AggregationFieldType!]
    mileage: [AggregationFieldType!]
    modelName: [AggregationFieldType!]
    rangeName: [AggregationFieldType!]
    rental: [AggregationFieldType!]
    term: [AggregationFieldType!]
    totalVehicles: Int
    transmission: [AggregationFieldType!]
    vehicleType: [AggregationFieldType!]
}

type Article {
    author: [Author]
    body: String
    category: [ArticleCategory]
    excerpt: String
    featuredImage: Image
    intro: String
    isFeatured: Boolean
    legacyUrl: String
    metaData: Meta
    name: String
    pinned: Boolean
    sections: Sections
    slug: String
    tags: [String]
    title: String
}

type ArticleCategory {
    articles: [Article]
    content: String
    metaData: Meta!
    pageTitle: String
    sections: Sections
}

type Asset {
    description: String
    file: File
    title: String
}

type Author {
    articles: [Article]
    avatar: Image
    biography: String
    inkedIn: String
    instagram: String
    name: String
    twitter: String
    vehicleReviews: [VehicleReview]
}

type BankAccountType {
    accountName: String
    accountNumber: String
    bankName: String
    createdAt: DateTime
    joinedAt: Date
    partyId: ID!
    sortCode: String
    updatedAt: DateTime
    uuid: ID!
}

type BankAccountV2Type {
    accountName: String
    accountNumber: String
    bankName: String
    joinedAt: Date
    joinedAtMonth: String
    joinedAtYear: String
    sortCode: String
    uuid: ID
}

type BankAccountValidatorType {
    accountNumber: String
    bankName: String
    branchName: String
    message: String
    sortCode: String
    valid: Boolean!
}

type BodyStyle {
    id: ID
    models: [Model!]
    name: String
    slug: String!
}

"Body Style fields"
type BodyStyleListType {
    bodyStyle: String
    capId: Int
    count: Int
    minPrice: Float
}

type BodyTypePage {
    body: String
    featuredImage: Image
    id: ID!
    intro: String
    metaData: Meta!
    sections: BodyTypeSections
}

type BodyTypeSections {
    tiles: Tiles
}

type Card {
    body: String
    image: Image
    link: Link
    merchandiseCard: Boolean
    name: String
    reviewRating: String
    title: String
    titleTag: String
}

type CardTestimonial {
    companyName: String
    customerName: String
    date: String
    email: String
    position: Int
    rating: String
    summary: String
}

type Cards {
    cards: [Card!]
    description: String
    name: String
    position: Int
    title: String
    titleTag: String
}

type Carousel {
    cardTestimonials: [CardTestimonial]
    cards: [Card]
    name: String
    position: Int
    title: String
}

type ClientWithDirectDebitType {
    bankAccount: BankAccountType
    directDebit: DirectDebitType
}

type Colour {
    basicPrice: Float!
    categoryDescription: String!
    derivativeId: ID!
    dictionaryCategory: DictionaryCategory
    dictionaryGeneric: DictionaryGeneric
    dictionaryOption: DictionaryOption!
    effectiveFrom: DateTime!
    effectiveTo: DateTime
    fullPrice: Float
    genericDescription: String
    id: ID!
    isDefault: Boolean!
    optionDescription: String!
    optionLongDescription: String!
    trims: [Trim]
    vat: Float!
}

type ColourImages {
    colourName: String
    imageUrls: [String]
}

type CompanyDataAddressType {
    addressLine1: String
    country: String
    locality: String
    postalCode: String
    premises: String
    region: String
}

type CompanyDataType {
    address: CompanyDataAddressType
    addressSnippet: String
    companyNumber: String!
    companyStatus: String!
    dateOfCreation: String!
    title: String!
}

"The connection type for CompanyOfficersDataType."
type CompanyOfficersConnection {
    "A list of edges."
    edges: [CompanyOfficersEdge]
    "A list of nodes."
    nodes: [CompanyOfficersDataType]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int!
}

type CompanyOfficersDataType {
    name: String!
}

"An edge in a connection."
type CompanyOfficersEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: CompanyOfficersDataType
}

type CompanyProfileDataType {
    description: String!
    sicCode: String!
}

type CompanyProfileType {
    sicData: [CompanyProfileDataType!]!
}

type CompanyType {
    about: String
    addresses: [AddressType!]
    annualExpenses: Float
    annualSalesCost: Float
    annualTurnover: Float
    associates: [PersonType!]
    bankAccounts: [BankAccountType!]
    companyNature: String
    companyNumber: String
    companyType: String
    createdAt: DateTime
    creditChecks: [CreditCheckType!]
    emailAddresses: [EmailAddressType!]!
    incomeAndExpense: IncomeAndExpenseType
    isVatRegistered: Boolean
    leadManagerId: ID
    legalName: String
    monthlyAmountBeingReplaced: Float
    otherCountriesOfActivity: [String!]
    partyId: ID!
    partyUuid: ID!
    pictureUrl: String
    replaceExistingVehicleFinance: Boolean
    roles: [RoleType!]
    sicCode: String
    sicIndustry: String
    telephoneNumbers: [TelephoneNumberType!]
    tradesOutsideUk: Boolean
    tradingName: String
    tradingSince: Date
    turnoverOutsideUk: Float
    turnoverPercentageOutsideUk: [TurnoverPercentageOutsideUkDataType!]
    updatedAt: DateTime
    uuid: ID!
    vatNumber: String
    vatRegistrationNumber: String
    vehicleRegistrationNumber: String
    withTradingAddress: Boolean
}

type ComparableVehicle {
    capId: Int
    data: [KeyInformation]
    vehicleType: VehicleTypeEnum
}

"Credit Application type"
type CreditApplicationType {
    aboutDetails: Json
    addresses: Json @deprecated(reason : "This field is now deprecated. Please use 'addressesV2' field instead.")
    addressesV2: [AddressV2Type!]
    bankAccounts: Json @deprecated(reason : "This field is now deprecated. Please use 'bankAccountsV2' field instead.")
    bankAccountsV2: [BankAccountV2Type!]
    companyDetails: Json
    createdAt: DateTime
    creditApplicationType: CreditApplicationTypeEnum
    directorsDetails: Json
    employmentHistories: Json @deprecated(reason : "This field is now deprecated. Please use 'addressesV2' field instead.")
    employmentHistoriesV2: [EmploymentHistoryV2Type!]
    financeType: String
    incomeAndExpenses: Json @deprecated(reason : "This field is now deprecated. Please use 'incomeAndExpensesV2' field instead.")
    incomeAndExpensesV2: IncomeAndExpenseV2Type
    leadManagerProposalId: ID
    lineItem: LineItemType
    partnersDetails: Json
    soleTraderDetails: Json
    status: String!
    submittedAt: DateTime
    updatedAt: DateTime
    uuid: ID!
    vatDetails: Json
}

type CreditCheckLineType {
    colour: String
    createdAt: DateTime
    creditCheckId: ID
    declineReason: String
    funder: String
    likelihood: Int
    offerType: String
    updatedAt: DateTime
    uuid: ID
}

type CreditCheckType {
    apiErrors: String
    cifas: Json
    createdAt: DateTime
    creditApplicationUuid: ID
    creditCheckLines: [CreditCheckLineType!]
    creditCheckType: String
    orderUuid: ID
    party: PartyType
    partyId: ID!
    response: Json
    score: Int
    status: String
    submissionId: Int
    updatedAt: DateTime
    uuid: ID!
}

type CustomerReview {
    name: String
    rating: Float
    review: String
}

type Derivative {
    bodyStyle: BodyStyle
    bodyStyleName: String
    bodyType: BodyStyle!
    bodyTypeCode: String
    capCode: String!
    colours: [Colour]
    discontinuedAt: DateTime
    doors: Int
    driveTrain: DriveTrain!
    fuelDelivery: FuelDelivery!
    fuelType: FuelType!
    fuelTypeName: String!
    fullName: String!
    id: ID!
    introducedAt: DateTime
    manufacturer: Manufacturer!
    manufacturerId: ID!
    manufacturerName: String!
    model: Model!
    modelId: ID!
    modelName: String!
    name: String!
    options: [Option]!
    prices: [Price]
    range: Range!
    rangeId: ID!
    rangeName: String!
    slug: String!
    standardEquipments: [StandardEquipment]!
    technicals: [Technical]!
    transmission: Transmission!
    transmissionId: ID!
    transmissionName: String!
    trims: [Trim]
    vehicleType: VehicleTypeEnum!
}

type DictionaryCategory {
    description: String!
    id: ID!
    longDescription: String!
}

type DictionaryGeneric {
    categoryId: ID!
    description: String!
    id: ID!
    longDescription: String!
}

type DictionaryOption {
    categoryId: ID!
    description: String!
    id: ID!
    longDescription: String!
}

type DictionaryTechnical {
    categoryId: ID!
    description: String!
    id: ID!
    longDescription: String!
}

type DirectDebitType {
    actionType: String
    addressId: ID
    bankAccountId: ID
    cancelNote: String
    cancelledBy: String
    communicationType: String
    createdAt: DateTime
    customFields: Json
    customerReference: String
    dealId: ID
    entryDate: Date
    firstCollectionAmount: Float
    firstCollectionDate: Date
    frequency: Int
    lastCollectionAmount: Float
    mandateCloseDate: Date
    mandateReference: String
    mandateType: String
    needCommunication: Boolean
    noOfCollections: Int
    notes: String
    oNEntryDate: Date
    regularCollectionAmount: Float
    regularCollectionDay: Int
    repeat: Int
    reset: String
    salesPersonName: String
    transactionType: String
    updatedAt: DateTime
    uuid: String
}

type DriveTrain {
    derivatives: [Derivative!]
    id: ID!
    name: String!
}

type DrivingLicenceCheckType {
    checkParams: Json
    checkReference: String
    checkedAt: DateTime
    createdAt: DateTime
    deletedAt: DateTime
    dvlaReport: Json
    partyId: ID!
    s3Key: String
    scanResult: Json
    scannedAt: DateTime
    updatedAt: DateTime
    uuid: ID!
}

type DropDownDataType {
    data: [String!]!
    favourites: [String!]!
}

type DropDownType {
    companyTypes: DropDownDataType!
    countries: DropDownDataType!
    employmentStatuses: DropDownDataType!
    maritalStatuses: DropDownDataType!
    nationalities: DropDownDataType!
    noOfAdultsInHousehold: DropDownDataType!
    noOfDependants: DropDownDataType!
    propertyStatuses: DropDownDataType!
    titles: DropDownDataType!
}

type EmailAddressType {
    createdAt: DateTime
    kind: String
    partyId: ID!
    primary: Boolean!
    updatedAt: DateTime
    uuid: ID!
    value: String!
}

type EmailAlreadyExistsResultType {
    isExists: Boolean
    isSuccessful: Boolean
    isTemporary: Boolean
}

type EmailExistsType {
    value: Boolean!
}

type EmploymentHistoryType {
    companyAddressCity: String
    companyAddressCountry: String
    companyAddressLineOne: String
    companyAddressLineThree: String
    companyAddressLineTwo: String
    companyAddressPostcode: String
    companyAddressServiceId: String
    companyName: String
    contract: String
    createdAt: DateTime
    deletedAt: DateTime
    employedSinceDate: Date
    employedUntilDate: Date
    employmentStatus: String
    grossAnnualIncome: Float
    jobTitle: String
    partyId: ID!
    updatedAt: DateTime
    uuid: ID!
    workPhoneNumber: String
}

type EmploymentHistoryV2Type {
    companyAddressCity: String
    companyAddressCountry: String
    companyAddressLineOne: String
    companyAddressLineThree: String
    companyAddressLineTwo: String
    companyAddressPostcode: String
    companyAddressServiceId: String
    companyName: String
    contract: String
    employedSinceDate: Date
    employedUntilDate: Date
    employmentStatus: String
    grossAnnualIncome: Float
    jobTitle: String
    uuid: ID
    workPhoneNumber: String
}

type FAQs {
    body: String
    position: Int
    questionSets: [QuestionSet]
    title: String
}

type Faq {
    answer: String
    question: String
}

type Featured {
    body: String
    cards: [Card]
    defaultHeight: Int
    iconList: [IconListItem]
    image: Image
    layout: [String]
    link: Link
    position: Int
    readMorePosition: Int
    targetId: String
    testimonials: [CardTestimonial]
    title: String
    titleTag: String
    video: String
}

type File {
    contentType: String!
    details: FileDetails!
    fileName: String!
    url: String!
}

type FileDetails {
    image: ImageDimensions!
    size: Int!
}

"Search filter label with slug"
type FilterLabel {
    label: String
    slug: String
}

"Search filters"
type FilterListType {
    bodyStyles: [String!]
    financeProfilesRateMax: Float
    financeProfilesRateMin: Float
    fuelTypes: [String!]
    groupedModels: [GroupedFilterType!]
    groupedModelsWithSlug: [GroupedFilterLabelType!]
    groupedRanges: [GroupedFilterType!]
    groupedRangesWithSlug: [GroupedFilterLabelType!]
    manufacturerNames: [String!]
    manufacturers: [FilterLabel!]
    modelNames: [String!]
    models: [FilterLabel!]
    rangeNames: [String!]
    ranges: [FilterLabel!]
    transmissions: [String!]
    vehicleTypes: [VehicleTypeEnum!]
}

"Finance Profile"
type FinanceProfileType {
    leaseType: LeaseTypeEnum!
    maintained: Boolean
    mileage: Int!
    rate: Float
    term: Int!
    upfront: Int!
    upfrontPayment: Float!
}

type Footer {
    id: ID!
    legalStatement: LegalStatement
    linkGroups: [LinkGroup]
    name: String
}

type FreeInsuranceType {
    eligible: Boolean
    optIn: Boolean
}

type FuelDelivery {
    derivatives: [Derivative!]
    id: ID!
    name: String!
    slug: String!
}

type FuelType {
    derivatives: [Derivative!]
    id: ID!
    name: String!
    slug: String!
}

type FullCreditCheckerType {
    creditCheck: CreditCheckType
    party: PartyType
}

"Full text search vehicle list type"
type FullTextSearchVehicleListType {
    aggregation: AggregationListType
    multiSelectAggs: AggregationListType
    vehicles: [VehicleListType!]
}

"Funder fields"
type FunderType {
    funderData: Json
    id: ID
}

type GenericPage {
    body: String
    featuredImage: Image
    id: ID!
    intro: String
    metaData: Meta!
    sections: Sections
    sectionsAsArray: SectionsAsArray
}

"Grouped filter labels"
type GroupedFilterLabelType {
    children: [FilterLabel!]!
    parent: FilterLabel!
}

"Grouped filters"
type GroupedFilterType {
    children: [String!]!
    parent: String!
}

type Header {
    id: ID!
    linkGroups: [LinkGroup]
    links: [Link]
    name: String
}

type Hero {
    body: String
    flag: String
    heroCard: [HeroCard]
    heroLabel: [HeroLabel]
    image: Image
    position: Int
    title: String
    titleTag: String
}

type HeroCard {
    body: String
    hero: Hero
    position: Int
    title: String
}

type HeroLabel {
    link: Link
    text: String
    visible: Boolean
}

"HMC type"
type HmcType {
    aggregation: AggregationListType
    vehicles: [VehicleListType!]
}

type IconBullets {
    iconBullets: [IconListItem]
    position: Int
    title: String
}

type IconListItem {
    text: String
}

type Image {
    description: String
    file: File
    title: String
}

type ImageDimensions {
    height: Int!
    width: Int!
}

type IncomeAndExpenseType {
    annualIncome: Int
    anticipateMonthlyIncomeChange: Boolean!
    averageMonthlyIncome: Int!
    carFinance: Int
    createdAt: DateTime
    creditCardPayments: Int
    deletedAt: DateTime
    foodAndClothes: Int
    fuel: Int
    futureMonthlyIncome: Int
    householdIncome: Int
    id: ID!
    insurance: Int
    mortgageOrRent: Int
    netDisposableIncome: Int
    otherCredit: Int
    partyId: ID!
    phoneAndInternet: Int
    studentLoan: Int
    suitabilityConsent: Boolean
    totalMonthlyExpenses: Int
    updatedAt: DateTime
    utilities: Int
    uuid: ID!
    withStudentLoan: Boolean
}

type IncomeAndExpenseV2Type {
    annualIncome: Int
    anticipateMonthlyIncomeChange: Boolean
    averageMonthlyIncome: Int
    carFinance: Int
    creditCardPayments: Int
    foodAndClothes: Int
    fuel: Int
    futureMonthlyIncome: Int
    householdIncome: Int
    insurance: Int
    mortgageOrRent: Int
    netDisposableIncome: Int
    otherCredit: Int
    phoneAndInternet: Int
    studentLoan: Int
    suitabilityConsent: Boolean
    totalMonthlyExpenses: Int
    utilities: Int
    uuid: ID
    withStudentLoan: Boolean
}

type Items {
    legacyUrl: String
    slug: String
}

type JumpMenu {
    links: [Link]
    position: Int
    title: String
}

type KeyInformation {
    name: String
    value: String
}

type LeadText {
    description: String
    heading: String
    position: Int
    titleTag: String
}

"Lease adjust"
type LeaseAdjustType {
    mileages: [Int!]!
    terms: [Int!]!
    upfronts: [Int!]!
}

type LegalStatement {
    body: String
    name: String
    title: String
}

"Line Item type"
type LineItemType {
    createdAt: DateTime
    creditApplications: [CreditApplicationType!]
    leadManagerQuoteId: ID
    order: OrderType
    productId: ID!
    productType: String!
    quantity: Int!
    status: String
    updatedAt: DateTime
    uuid: ID!
    vehicleProduct: VehicleProductType
}

type Link {
    image: [Image]
    label: String
    legacyUrl: String
    text: String
    url: String
    visible: Boolean
}

type LinkGroup {
    body: String
    linkGroups: [Links]
    links: [Link]
    name: String
    promotionalImage: Link
}

type Links {
    links: [Link]
    name: String
    promotionalImage: Link
}

type LoginResultType {
    accessToken: String
    idToken: String
}

type LogoutResultType {
    isSuccessful: Boolean
}

type Manufacturer {
    derivatives: [Derivative!]
    id: ID!
    models: [Model!]
    name: String!
    ranges: [Range!]
    slug: String!
    vehicleType: VehicleTypeEnum!
}

type ManufacturerCarousel {
    cards: [Card]
    name: String
    title: String
}

"Manufacturer fields"
type ManufacturerListType {
    capId: Int
    count: Int
    manufacturerId: ID
    manufacturerName: String
    minPrice: Float
}

type ManufacturerPage {
    body: String
    featuredImage: Image
    id: ID!
    intro: String
    metaData: Meta!
    sections: ManufacturerSections
}

type ManufacturerSections {
    carousel: ManufacturerCarousel
    featured: Featured
    tiles: Tiles
}

type Meta {
    breadcrumbs: JSON
    canonicalUrl: String
    capId: Int
    legacyUrl: String
    metaDescription: String
    metaRobots: String
    name: String
    pageType: String
    publishedOn: DateTime
    schema: JSON
    slug: String
    title: String
}

type Model {
    bodyStyle: BodyStyle
    bodyStyleId: ID
    derivatives: [Derivative!]
    id: ID!
    isSpecialEdition: Boolean!
    manufacturer: Manufacturer!
    manufacturerId: ID!
    name: String!
    range: Range!
    rangeId: ID!
    slug: String!
    vehicleType: VehicleTypeEnum!
    yearDiscontinued: Int!
    yearIntroduced: Int!
}

"Model fields"
type ModelListType {
    count: Int
    minPrice: Float
    modelId: ID
    modelName: String
}

type ModelPage {
    body: String
    featuredImage: Image
    id: ID!
    intro: String
    metaData: Meta!
    sections: ModelSections
}

type ModelSections {
    tiles: Tiles
}

type Mutation {
    "B2B full credit checker for Sole trader and Limited companies"
    b2bFullCreditChecker(input: FullCreditCheckerInputObject!): FullCreditCheckerType
    "Create new Direct Debit entry and integrate with interbacs"
    createClientWithDirectDebit(input: ClientWithDirectDebitInputObject): ClientWithDirectDebitType
    "Create new Opportunity"
    createOpportunity(input: OpportunityInputObject!): OpportunityType
    "Create new Address or update existing Address"
    createUpdateAddress(input: AddressHistoryInputObject): [AddressType!]
    "Create new Bank Account or update existing"
    createUpdateBankAccount(input: BankAccountInputObject): BankAccountType
    "Create new Business Person or update existing Business Person"
    createUpdateBusinessPerson(input: PersonInputObject): PersonType
    "Create or update Charity Company"
    createUpdateCharityCompany(input: CharityCompanyInputObject): CompanyType
    "Create or update company Director"
    createUpdateCompanyDirector(input: LimitedCompanyInputObject): CompanyType
    "Create or update company Partner"
    createUpdateCompanyPartner(input: PartnershipCompanyInputObject): CompanyType
    "Create or update company Trustee"
    createUpdateCompanyTrustee(input: CharityCompanyInputObject): CompanyType
    "Create Update CreditApplication"
    createUpdateCreditApplication(input: CreditApplicationInputObject): CreditApplicationType
    "Create new Employment History or update existing"
    createUpdateEmploymentHistory(input: EmploymentHistoryInputObject): [EmploymentHistoryType!]
    "Create new monthly income and expenses or update existing"
    createUpdateIncomeAndExpense(input: IncomeAndExpenseInputObject): IncomeAndExpenseType
    "Create or Update Lead Manager person on sync"
    createUpdateLeadManagerPerson(input: PersonInputObject): PersonType
    "Create or update Ltd. Company"
    createUpdateLimitedCompany(input: LimitedCompanyInputObject): CompanyType
    "Create order or update an existing one"
    createUpdateOrder(input: OrderInputObject!): OrderType
    "Create or update Partnership Company"
    createUpdatePartnershipCompany(input: PartnershipCompanyInputObject): CompanyType
    "Create new Person or update existing Person"
    createUpdatePerson(input: PersonInputObject): PersonType
    "Create or update Sole Trader Company"
    createUpdateSoleTraderCompany(input: SoleTraderCompanyInputObject): CompanyType
    "Create vehicle configuration or update an existing one"
    createVehicleConfiguration(input: VehicleConfigurationInputObject!): VehicleConfigurationType
    emailAlreadyExists(email: String!): EmailAlreadyExistsResultType
    "FullCreditChecker for soft credit check with order data"
    fullCreditChecker(input: FullCreditCheckerInputObject!): FullCreditCheckerType
    loginV2(password: String!, username: String!): LoginResultType
    logoutV2: LogoutResultType
    passwordChangeV2(newPassword: String!, oldPassword: String!): PasswordChangeResultType
    passwordConfirm(password: String!, username: String!, verificationCode: String!): PasswordConfirmResultType
    passwordCorrectV2(password: String!): PasswordCorrectResultType
    passwordReset(username: String!): PasswordResetResultType
    "Publish a vehicle configuration"
    publishVehicleConfiguration(input: VehicleConfigurationInputObject!): VehicleConfigurationType
    "QuickCreditChecker for soft credit check with minimum data"
    quickCreditChecker(input: QuickCreditCheckerInputObject): QuickCreditCheckerType
    register(communicationsConsent: Boolean, firstName: String!, lastName: String!, password: String!, privacyPolicy: Boolean!, redirectUrl: String, termsAndConditions: Boolean!, username: String!): registerType
    registerForTemporaryAccess(firstName: String!, lastName: String!, username: String!): RegisterForTemporaryAccessResultType
    "Scan users driving licence for OCR"
    scanDrivingLicence(input: DrivingLicenceCheckInputObject): DrivingLicenceCheckType
    testMutation: String!
    "Unpublish a vehicle configuration"
    unpublishVehicleConfiguration(input: VehicleConfigurationInputObject!): VehicleConfigurationType
    "Update company Sole Trader"
    updateCompanySoleTrader(input: SoleTraderCompanyInputObject): CompanyType
    "Update existing direct debit and update interbacs with api"
    updateDirectDebit(input: DirectDebitInputType, updateInterbacs: Boolean): DirectDebitType
    "Update personal details in my account"
    updateMyAccountDetails(input: MyAccountInputObject!): MyAccountType
}

type MyAccountType {
    address: AddressType
    emailAddress: String!
    emailConsent: Boolean
    firstName: String!
    lastName: String!
    party: PartyType!
    personUuid: ID!
    smsConsent: Boolean
    telephoneNumber: String
}

type NextBestPrice {
    maintained: Float
    nonMaintained: Float
}

type OccupationListType {
    occupations: [String!]!
}

type OpportunityType {
    capId: Int
    communicationsConsent: Boolean
    companyName: String
    createdAt: DateTime
    email: String!
    fleetSize: Int
    fullName: String!
    opportunitySubtype: OpportunitySubtypeEnum
    opportunityType: OpportunityTypeEnum!
    party: PartyType
    partyId: ID
    phoneNumber: String!
    postcode: String!
    privacyPolicy: Boolean
    termsAndConditions: Boolean
    updatedAt: DateTime
    uuid: ID!
    vehicleType: String
}

type Option {
    basicPrice: Float!
    categoryDescription: String!
    derivativeId: ID!
    dictionaryCategory: DictionaryCategory!
    dictionaryGeneric: DictionaryGeneric
    dictionaryOption: DictionaryOption!
    effectiveFrom: DateTime!
    effectiveTo: DateTime
    fullPrice: Float
    genericDescription: String
    id: ID!
    isDefault: Boolean!
    optionDescription: String!
    optionLongDescription: String!
    vat: Float!
}

"Order"
type OrderType {
    createdAt: DateTime
    leaseType: LeaseTypeEnum!
    lineItems: [LineItemType!]!
    partyUuid: ID
    personUuid: ID
    referenceNumber: String
    salesChannel: String!
    status: String!
    updatedAt: DateTime
    uuid: ID!
}

type PageCollection {
    items: [Items]
    limit: Int!
    skip: Int!
    total: Int!
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Partner {
    colourPrimary: String
    colourSecondary: String
    customerSovereignty: Int
    email: String
    featured: Featured
    financeTypes: String
    footer: Footer
    fuelTypes: [String!]
    hero: Hero
    id: ID!
    logo: Asset
    name: String
    primaryNavigation: LinkGroup
    slug: String
    telephone: String
    tiles: [Tile!]
    uuid: String
    vehicleTypes: [String!]
}

type PartyType {
    addresses: [AddressType!]
    bankAccounts: [BankAccountType!]
    company: CompanyType
    createdAt: DateTime
    emailAddresses: [EmailAddressType!]!
    employmentHistories: [EmploymentHistoryType!]
    incomeAndExpense: IncomeAndExpenseType
    leadManagerId: ID
    person: PersonType
    telephoneNumbers: [TelephoneNumberType!]
    updatedAt: DateTime
    uuid: ID!
}

type PasswordChangeResultType {
    isSuccessful: Boolean
}

type PasswordConfirmResultType {
    isSuccessful: Boolean
}

type PasswordCorrectResultType {
    isSuccessful: Boolean
}

type PasswordResetResultType {
    isSuccessful: Boolean
}

type PersonType {
    about: String
    addresses: [AddressType!]
    bankAccounts: [BankAccountType!]
    businessShare: Float
    cognitoSub: ID
    companies: [CompanyType!]
    countryOfBirth: String
    createdAt: DateTime
    creditChecks: [CreditCheckType!]
    dateOfBirth: Date
    disabilityRegistered: Boolean
    emailAddresses: [EmailAddressType!]!
    emailConsent: Boolean
    employmentHistories: [EmploymentHistoryType!]
    firstName: String!
    gender: String
    incomeAndExpense: IncomeAndExpenseType
    isApplicant: Boolean
    isDirector: Boolean
    jobTitle: String
    lastName: String!
    leadManagerId: ID
    maritalStatus: String
    middleName: String
    nationality: String
    noOfAdultsInHousehold: String
    noOfDependants: String
    occupation: String
    partyId: ID!
    partyUuid: ID!
    pictureUrl: String
    privacyPolicy: Boolean
    profilingConsent: Boolean
    roles: [RoleType!]
    smsConsent: Boolean
    telephoneNumbers: [TelephoneNumberType!]
    termsAndConditions: Boolean
    title: String
    tradingName: String
    updatedAt: DateTime
    uuid: ID!
    vatRegistrationNumber: String
}

type Price {
    basicPrice: Float!
    delivery: Float!
    derivativeId: ID!
    effectiveFrom: DateTime!
    effectiveTo: DateTime
    fullPrice: Float!
    vat: Float!
}

type ProductCard {
    averageRating: Float
    businessRate: Float
    capId: ID
    derivativeName: String
    imageUrl: String
    isOnOffer: Boolean
    keyInformation: [KeyInformation]
    leadTime: String
    manufacturerName: String
    modelName: String
    offerPosition: Int
    personalRate: Float
    rangeName: String
    vehicleType: VehicleTypeEnum
}

"Elasticsearch Bucket"
type ProductFilterBucketType {
    docCount: Int!
    key: String!
}

"Search filters"
type ProductFilterListType {
    bodyStyles: ProductFilterType
    financeTypes: ProductFilterType
    fuelTypes: ProductFilterType
    initialPayment: ProductFilterRangeType
    initialPeriods: ProductFilterType
    manufacturers: ProductFilterType
    mileages: ProductFilterType
    models: ProductFilterType
    ranges: ProductFilterType
    rental: ProductFilterRangeType
    terms: ProductFilterType
    transmissions: ProductFilterType
    vehicleTypes: ProductFilterType
}

"Elasticsearch Range Filter"
type ProductFilterRangeType {
    docCount: Int!
    stats: ProductFilterStatsType!
}

"Elasticsearch Stats"
type ProductFilterStatsType {
    avg: Float!
    count: Int!
    max: Float!
    min: Float!
}

"Elasticsearch Filter"
type ProductFilterType {
    buckets: [ProductFilterBucketType!]!
    docCount: Int!
}

type ProposalRuleDataRequirementType {
    dataType: String
    minLength: Int
    minValue: Int
    options: [String!]
    required: Boolean
    unit: String
    validation: String
}

type ProposalRuleDataType {
    bankAccountName: ProposalRuleDataRequirementType!
    bankAccountNumber: ProposalRuleDataRequirementType!
    bankSortCode: ProposalRuleDataRequirementType!
    businessEmailAddress: ProposalRuleDataRequirementType!
    businessName: ProposalRuleDataRequirementType!
    businessRegisteredAddress: ProposalRuleDataRequirementType!
    businessTradingAddress: ProposalRuleDataRequirementType!
    companyRegistrationNumber: ProposalRuleDataRequirementType!
    directorsAddressHistory: ProposalRuleDataRequirementType!
    directorsDateOfBirth: ProposalRuleDataRequirementType!
    directorsEmailAddress: ProposalRuleDataRequirementType!
    directorsGender: ProposalRuleDataRequirementType!
    directorsMinimumAge: ProposalRuleDataRequirementType!
    directorsName: ProposalRuleDataRequirementType!
    directorsNationality: ProposalRuleDataRequirementType!
    directorsNumberOfDependants: ProposalRuleDataRequirementType!
    directorsPropertyStatus: ProposalRuleDataRequirementType!
    directorsShareOfBusiness: ProposalRuleDataRequirementType!
    directorsTitle: ProposalRuleDataRequirementType!
    landlineTelephone: ProposalRuleDataRequirementType!
    minimumNetWorth: ProposalRuleDataRequirementType!
    minimumTimeTrading: ProposalRuleDataRequirementType!
    mobileTelephone: ProposalRuleDataRequirementType!
    natureOfBusiness: ProposalRuleDataRequirementType!
    otherCountriesOfActivity: ProposalRuleDataRequirementType!
    timeAtBank: ProposalRuleDataRequirementType!
    tradeOutsideOfUk: ProposalRuleDataRequirementType!
    turnoverOutsideOfUk: ProposalRuleDataRequirementType!
    vatNumber: ProposalRuleDataRequirementType!
}

type Query {
    aboutUsLandingPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    advancedBreakdownCoverPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    "Get all drop downs"
    allDropDowns: DropDownType
    allEmploymentHistories: [EmploymentHistoryType!]
    "Get all proposal rules by company type and funder type"
    allProposalRules(companyType: String!, funderType: String!): ProposalRuleDataType
    "Validation of bank accounts"
    bankAccountValidator(accountNumber: String!, sortCode: String!): BankAccountValidatorType
    blackFridayPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    blogHomePage: GenericPage! @deprecated(reason : "Use genericPage query.")
    blogPost(slug: String!): Article!
    blogPosts(slug: String!): ArticleCategory!
    "Find Body Styles"
    bodyStyleList(filter: BodyStyleListFilterObject, sort: SortDirection): [BodyStyleListType!]
    bodyTypePage(slug: String!): BodyTypePage!
    carLeasingExplainedPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    colourList(capId: ID!, trimId: Int, vehicleType: VehicleTypeEnum!): [Stocklight]
    "Find Companies by Person Uuid"
    companiesByPersonUuid(personUuid: ID!): [CompanyType!]
    "Find Company by leadManagerId"
    companyByLeadManagerId(leadManagerId: ID!): CompanyType
    "Find Company by Uuid"
    companyByUuid(uuid: ID!): CompanyType
    "Get Companies House company officers."
    companyOfficers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        companyNumber: String!,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): CompanyOfficersConnection!
    "Companies House company profile."
    companyProfile(companyNumber: String!): CompanyProfileType!
    contactUsLandingPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    "Find credit application by order uuid"
    creditApplicationByOrderUuid(orderUuid: ID!): CreditApplicationType
    "Find credit Application by uuid"
    creditApplicationByUuid(uuid: ID!): CreditApplicationType
    "All Credit Applications by lead_manager_proposal_id"
    creditApplicationsByLeadManagerProposalId(leadManagerProposalId: ID!): [CreditApplicationType!]
    "Find credit check by uuid"
    creditCheckByUuid(uuid: ID!): CreditCheckType
    customData(vehicleType: VehicleTypeEnum): JSONObject
    customerLeasingFaqsPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    derivative(id: ID!, vehicleType: VehicleTypeEnum): Derivative
    derivativeByCode(capCode: String!, vehicleType: VehicleTypeEnum): Derivative
    derivativeInfo(id: ID!, vehicleType: VehicleTypeEnum): Derivative
    derivatives(ids: [ID!]!, vehicleType: VehicleTypeEnum): [Derivative!]
    eligibilityCheckerLandingPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    "Inline email validation for B2B company details page. Check if email address already taken for person's company."
    emailAddressInlineValidation(emailAddress: String!, personUuid: ID!): PersonType
    "Find email already exists by primary email"
    emailExists(email: String!): EmailExistsType!
    "prod give me"
    employmentHistoriesById(partyId: ID!): EmploymentHistoryType
    featuredTechnicals(id: ID!, vehicleType: VehicleTypeEnum!): [featuredTechnical!]
    "Search filters"
    filterList(filter: FilterListObject): FilterListType
    fleetLandingPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    "Search result page vehicles"
    fullTextSearchVehicleList(filter: FilterListObject, pagination: PaginationInputObject, query: String, sort: [SortObject!]): FullTextSearchVehicleListType
    "Gets funder directors details"
    funderDirectors(input: FunderInputObject!): FunderType
    genericPage(sectionsAsArray: Boolean, slug: String!): GenericPage!
    genericPages(limit: Int, skip: Int, slugs: [String!]!): PageCollection
    "Find Person by JWT token"
    getPerson: PersonType
    hello: String
    "Help me choose vehicle list"
    helpMeChoose(filter: FilterListObject, pagination: PaginationInputObject, sort: [SortObject!]): HmcType
    homePage: GenericPage! @deprecated(reason : "Use genericPage query.")
    hubCarPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    hubPickupPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    hubVanPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    insuranceLandingPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    "Retrieve all params for lease adjust"
    leaseAdjustParams: LeaseAdjustType
    "Find Manufacturers"
    manufacturerList(filter: ManufacturerListFilterObject, sort: SortDirection): [ManufacturerListType!]
    manufacturerPage(slug: String!): ManufacturerPage!
    manufacturers(vehicleType: VehicleTypeEnum): [Manufacturer!]!
    "Find Models"
    modelList(filter: ModelListFilterObject, sort: SortDirection): [ModelListType!]
    modelPage(slug: String!): ModelPage!
    "Find Person by UUID and return personal details for my account section"
    myAccountDetailsByPersonUuid(personUuid: String!): MyAccountType
    "Get orders by party_uuids and filter"
    myOrders(filter: MyOrdersTypeEnum!, partyUuids: [ID!]!): [OrderType!]!
    "Get OccupationList by argument"
    occupationList(occupation: String!): OccupationListType!
    "Find opportunity by Uuid"
    opportunityByUuid(uuid: ID!): OpportunityType
    "Gets an order and line_item/quote by lead manager quote id"
    orderByLeadManagerQuoteId(leadManagerQuoteId: ID!): OrderType
    "Gets an order and line_item/quote by line_item uuid"
    orderByLineItemUuid(lineItemUuid: ID!): OrderType
    "Gets an order by uuid"
    orderByUuid(uuid: ID!): OrderType
    "Get orders by party_uuid"
    ordersByPartyUuid(excludeStatuses: [String!], partyUuid: [ID!]!, statuses: [String!]): [OrderType!]!
    "Get orders by person_uuid"
    ordersByPersonUuid(personUuid: ID!): [OrderType!]!
    pageCollection(limit: Int, pageType: String!, skip: Int): PageCollection
    partner(slug: String!): Partner
    "Find Party by Lead Manager Id"
    partyByLeadManagerId(leadManagerId: ID!): PartyType
    "Find Party by Uuid"
    partyByUuid(uuid: ID!): PartyType
    "Find Person by cognitoSub"
    personByCognitoSub(cognitoSub: ID!): PersonType
    "Find Person by primary email"
    personByEmail(email: String!): PersonType
    "Find Person by Lead Manager Id"
    personByLeadManagerId(leadManagerId: ID!): PersonType
    "Find Person by JWT token"
    personByToken(token: String!): PersonType
    "Find Person by Uuid"
    personByUuid(uuid: ID!): PersonType
    primaryFooter: Footer!
    primaryHeader: Header!
    productCard(capIds: [ID!]!, vehicleType: VehicleTypeEnum): [ProductCard]
    productCarousel(bodyType: String, excludeBodyType: String, fuelTypes: [String], onOffer: Boolean, page: Int, pageSize: Int, vehicleType: VehicleTypeEnum): [ProductCard]
    "Search filters"
    productsFilterList(filter: ProductFilterListInputObject): ProductFilterListType
    "Return all pdp urls"
    publishedPdpUrls: [String!]
    quoteByCapId(capId: ID!, colour: Int, leaseType: LeaseTypeEnum, mileage: Int, term: Int, trim: Int, upfront: Int, vehicleType: VehicleTypeEnum): Quote
    "Find Ranges"
    rangeList(filter: RangeListFilterObject, sort: SortDirection): [RangeListType!]
    rangePage(slug: String!): RangePage!
    regionalOfficesPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    reviewsPage(slug: String!): ReviewsPage!
    "Search Companies House companies."
    searchCompanies(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        search: String!
    ): SearchCompaniesConnection!
    searchResultsPage(slug: String!): SearchResultsPage!
    "Get SIC codes by argument"
    sicCodes(value: String!): SicCodesType!
    "Site-wide suggestion list for search field"
    suggestionList(pagination: PaginationInputObject, query: String): SuggestionListType
    testimonials(page: Int, pageSize: Int): [Testimonial]
    trimList(capId: ID!, colourId: Int, vehicleType: VehicleTypeEnum!): [Stocklight]
    vanLeasingExplainedPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    vanOffersPage: GenericPage! @deprecated(reason : "Use genericPage query.")
    vehicleComparator(vehicles: [VehicleToCompare!]!): [ComparableVehicle]
    "Find vehicle configuration by cap id"
    vehicleConfigurationByCapId(capId: Int!, leaseType: LeaseTypeEnum, vehicleType: VehicleTypeEnum): VehicleConfigurationType
    "Find vehicle configuration by url"
    vehicleConfigurationByUrl(url: String!): VehicleConfigurationType
    "Find vehicle configuration urls"
    vehicleConfigurationUrls(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        vehicleType: VehicleTypeEnum
    ): VehicleConfigurationUrlsConnection!
    vehicleDetails(capId: ID!, vehicleType: VehicleTypeEnum): VehicleDetails
    vehicleImages(all: Boolean, capIds: [ID], rangeId: ID, vehicleType: VehicleTypeEnum): [VehicleImages]
    "Find Vehicle by filter"
    vehicleList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: VehicleListFilterObject,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: [SortObject!]
    ): VehicleListConnection!
    vehicleReviewHubPage(slug: String): GenericPage! @deprecated(reason : "Use genericPage query.")
}

type QuestionAnswer {
    answer: String
    question: String
}

type QuestionSet {
    questionAnswers: [QuestionAnswer]
    title: String
}

type QuickCreditCheckerType {
    creditCheck: CreditCheckType
    person: PersonType
    score: Int
    status: Int
}

type Quote {
    capId: ID
    colour: ID
    financeType: Int
    funderId: Int
    leadTime: String
    leaseCost: RentalCost
    leaseType: LeaseTypeEnum
    maintenanceCost: RentalCost
    mileage: Int
    nextBestPrice: NextBestPrice
    processingFee: Float
    stock: String
    term: Int
    trim: ID
    upfront: Int
    vehicleType: VehicleTypeEnum
}

type Range {
    derivatives: [Derivative!]
    id: ID!
    manufacturer: Manufacturer!
    manufacturerId: ID!
    models: [Model!]
    name: String!
    slug: String!
    vehicleType: VehicleTypeEnum!
}

type RangeCarousel {
    cards: [Card]
    name: String
    title: String
}

"Range fields"
type RangeListType {
    count: Int
    minPrice: Float
    rangeId: ID
    rangeName: String
}

type RangePage {
    body: String
    featuredImage: Image
    id: ID!
    intro: String
    metaData: Meta!
    sections: RangeSections
}

type RangeSections {
    carousel: RangeCarousel
    tiles: Tiles
}

type RegisterForTemporaryAccessResultType {
    accessToken: String
    emailAddress: RegisteredForTemporaryAccessEmailType
    isSuccessful: Boolean
    uuid: String
}

type RegisteredForTemporaryAccessEmailType {
    kind: String
    uuid: ID
    value: String
}

type RelatedVehicle {
    capId: String
    displayOrder: String
}

type RentalCost {
    excessMileage: Float
    initialRental: Float
    monthlyRental: Float
}

type Reviews {
    reviews: [VehicleReview]
    reviewsTitle: String
}

type ReviewsPage {
    body: String
    brochure: Image
    featuredImage: Image
    id: ID!
    intro: String
    metaData: Meta!
    sections: ReviewsPageSections
}

type ReviewsPageSections {
    link: Link
    reviews: Reviews
    rowText: RowText
    vehicleReview: VehicleReview
    vehicleReviewMedia: VehicleReviewMedia
}

type RoleType {
    company: CompanyType!
    companyId: Int
    createdAt: DateTime
    person: PersonType!
    personId: Int!
    position: String
    primaryContact: Boolean
    updatedAt: DateTime
    uuid: ID!
}

type RowText {
    body: String
    heading: String
    link: Link
    position: Int
    subHeading: String
    titleTag: String
}

"The connection type for CompanyDataType."
type SearchCompaniesConnection {
    "A list of edges."
    edges: [SearchCompanyEdge]
    "A list of nodes."
    nodes: [CompanyDataType]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int!
}

"An edge in a connection."
type SearchCompanyEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: CompanyDataType
}

type SearchResultsPage {
    body: String
    featuredImage: Image
    id: ID!
    intro: String
    metaData: Meta!
    sections: Sections
}

type Sections {
    cards: Cards
    carousel: Carousel
    faqs: FAQs
    featured: Featured
    featured1: Featured
    featured2: Featured
    featured3: Featured
    featured4: Featured
    hero: Hero
    iconBullets: IconBullets
    iconBullets1: IconBullets
    iconBullets2: IconBullets
    leadText: LeadText
    legalStatement: LegalStatement
    legalStatement1: LegalStatement
    legalStatement2: LegalStatement
    questionSet: QuestionSet
    rowText: RowText
    steps: Steps
    tiles: Tiles
    tiles1: Tiles
    tiles2: Tiles
}

type SectionsAsArray {
    cards: [Cards]
    carousel: [Carousel]
    faqs: [FAQs]
    featured: [Featured]
    hero: [Hero]
    iconBullets: [IconBullets]
    jumpMenu: [JumpMenu]
    leadText: [LeadText]
    legalStatement: [LegalStatement]
    questionSet: [QuestionSet]
    rowText: [RowText]
    steps: [Steps]
    tiles: [Tiles]
}

type SicCodesDataType {
    description: String!
    sicCode: String!
}

type SicCodesType {
    sicData: [SicCodesDataType!]!
}

type StandardEquipment {
    categoryDescription: String!
    derivativeId: ID!
    dictionaryCategory: DictionaryCategory!
    dictionaryGeneric: DictionaryGeneric
    dictionaryOption: DictionaryOption!
    effectiveFrom: DateTime!
    effectiveTo: DateTime
    genericDescription: String
    id: ID!
    optionDescription: String!
    optionLongDescription: String!
}

type Step {
    body: String
    position: Int
    title: String
}

type Steps {
    heading: String
    position: Int
    steps: [Step!]
    titleTag: String
}

type Stocklight {
    label: String
    optionId: Int
}

"Suggestion fields"
type SuggestionListType {
    suggestions: [String!]
}

type Technical {
    categoryDescription: String!
    derivativeId: ID!
    dictionaryCategory: DictionaryCategory!
    dictionaryTechnical: DictionaryTechnical!
    effectiveFrom: DateTime!
    effectiveTo: DateTime
    id: ID!
    technicalDescription: String!
    technicalLongDescription: String!
    unit: String
    value: String!
}

type TelephoneNumberType {
    createdAt: DateTime
    kind: String
    partyId: ID!
    primary: Boolean!
    updatedAt: DateTime
    uuid: ID!
    value: String!
}

type Testimonial {
    comments: String
    date: DateTime!
    name: String!
    overallRating: Float!
    ratingDeal: Float!
    ratingInformationAdviceAndGuidance: Float!
    ratingInitialEnquiry: Float!
    ratingKeptUpToDate: Float!
    ratingLikelihoodOfRecommending: Float!
    ratingLikelihoodOfUsingUsAgain: Float!
    ratingSatisfaction: Float!
    whyLease: String
}

type Tile {
    body: String
    image: Image
    link: Link
    title: String
}

type Tiles {
    name: String
    position: Int
    tiles: [Tile!]
    tilesTitle: String
    titleTag: String
}

type Transmission {
    derivatives: [Derivative!]
    id: ID!
    name: String!
    slug: String!
}

type Trim {
    basicPrice: Float!
    categoryDescription: String!
    colours: [Colour]
    derivativeId: ID!
    dictionaryCategory: DictionaryCategory!
    dictionaryGeneric: DictionaryGeneric
    dictionaryOption: DictionaryOption!
    effectiveFrom: DateTime!
    effectiveTo: DateTime
    fullPrice: Float
    genericDescription: String
    id: ID!
    isDefault: Boolean!
    optionDescription: String!
    optionLongDescription: String!
    vat: Float!
}

type TurnoverPercentageOutsideUkDataType {
    country: String!
    percentage: String!
}

"Url"
type UrlType {
    bodyStyle: String!
    legacy: Boolean!
    url: String!
    uuid: ID!
    vehicleType: VehicleTypeEnum!
}

"Vehicle configuration"
type VehicleConfigurationType {
    capDerivativeDescription: String!
    capDerivativeId: Int!
    capManufacturerDescription: String!
    capModelDescription: String!
    capPaintDescription: String!
    capRangeDescription: String!
    capTrimDescription: String!
    financeProfile: FinanceProfileType
    financeProfiles: [FinanceProfileType!]
    lcv: Boolean!
    legacyUrl: String
    offerRanking: Int
    onOffer: Boolean
    published: Boolean!
    url: String
    uuid: ID!
    vehicleType: VehicleTypeEnum!
}

"The connection type for UrlType."
type VehicleConfigurationUrlsConnection {
    "A list of edges."
    edges: [VehicleConfigurationUrlsEdge]
    "A list of nodes."
    nodes: [UrlType]
    nodesCount: Int!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int!
}

"An edge in a connection."
type VehicleConfigurationUrlsEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: UrlType
}

type VehicleDetails {
    averageRating: Float
    brochureUrl: String
    customerReviews: [CustomerReview]
    independentReview: String
    keyInformation: [KeyInformation]
    rangeFaqs: [Faq]
    relatedVehicles: [RelatedVehicle]
    totalReviews: Int
    warranty: String
}

type VehicleImages {
    capId: Int
    colourImages: [ColourImages]
    imageUrls: [String]
    mainImageUrl: String
    threeSixtyVideoUrl: String
    vehicleType: VehicleTypeEnum
    videoUrl: String
}

"The connection type for VehicleListType."
type VehicleListConnection {
    "A list of edges."
    edges: [VehicleListEdge]
    "A list of nodes."
    nodes: [VehicleListType]
    nodesCount: Int!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int!
}

"An edge in a connection."
type VehicleListEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: VehicleListType
}

"Vehicle Configuration fields"
type VehicleListType {
    availability: Int
    availabilityMessage: String
    availabilitySort: Int
    bodyStyle: String
    capBodyStyle: String
    capCode: String
    capId: ID
    configId: ID
    derivativeId: ID
    derivativeName: String
    doors: Int
    financeProfiles: [FinanceProfileType!]
    financeType: FinanceTypeEnum
    fuelType: String
    fullDescription: String
    initialPayment: Float
    legacyUrl: String
    lqBodyStyle: String
    lqUrl: String
    manufacturerId: ID
    manufacturerName: String
    mileage: Int
    modelId: ID
    modelName: String
    offerRanking: Int
    onOffer: Boolean
    rangeId: ID
    rangeName: String
    rental: Float
    term: Int
    transmission: String
    url: String
    vehicleType: VehicleTypeEnum
}

"Vehicle Product type"
type VehicleProductType {
    annualMileage: Int
    colour: String
    createdAt: DateTime
    depositMonths: Int
    depositPayment: Float
    derivativeCapId: ID!
    description: String
    finalPayment: Float
    financeType: String
    freeInsurance: FreeInsuranceType
    funderData: Json
    funderId: String
    leadTime: String
    maintenance: Boolean
    maintenancePrice: Float
    monthlyPayment: Float
    partnerSlug: PartnerSlugTypeEnum
    term: Int
    trim: String
    updatedAt: DateTime
    uuid: ID!
    vehicleType: VehicleTypeEnum!
    vsku: String
}

type VehicleReview {
    author: [Author]
    capID: String
    customerName: String
    rating: String
    reviewType: String
    summary: String
}

type VehicleReviewMedia {
    reviewPhoto: Image
    reviewVideo: String
}

type featuredTechnical {
    code: ID!
    description: String!
    fieldName: String
    type: String
    unit: String
    value: String
}

type registerType {
    uuid: ID
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

"CreditApplication Type"
enum CreditApplicationTypeEnum {
    "B2B Limited credit application"
    B2B_LIMITED
    "B2B partnership credit application"
    B2B_PARTNERSHIP
    "B2B Registered partnership credit application"
    B2B_REGISTERED_PARTNERSHIP
    "B2B Sole trader credit application"
    B2B_SOLE_TRADER
    "B2C personal credit application"
    B2C_PERSONAL
}

"Finance type enum"
enum FinanceTypeEnum {
    "Business Contract Hire"
    BCH
    "Finance lease"
    FL
    "Personal Contract Hire"
    PCH
}

"Company types for funder"
enum FunderCompanyTypeEnum {
    "limited"
    limited
    "partnership"
    partnership
}

"Lease type"
enum LeaseTypeEnum {
    "Business lease type"
    BUSINESS
    "Personal lease type"
    PERSONAL
}

"Filter orders/quotes by section"
enum MyOrdersTypeEnum {
    "all orders"
    ALL_ORDERS
    "all quotes"
    ALL_QUOTES
    "all completed orders"
    COMPLETED_ORDERS
    "all in progress orders"
    IN_PROGRESS_ORDERS
}

"Opportunity subtype enum"
enum OpportunitySubtypeEnum {
    "Gap insurance subtype"
    GAPINSURANCE
    "Multiyear subtype"
    MULTIYEAR
    "Shortterm subtype"
    SHORTTERM
    "Tools intransit subtype"
    TOOLSINTRANSIT
}

"Opportunity type enum"
enum OpportunityTypeEnum {
    "Callback type"
    CALLBACK
    "Fleet type"
    FLEET
    "Insurance type"
    INSURANCE
    "Quote type"
    QUOTE
}

"Partner slug type enum"
enum PartnerSlugTypeEnum {
    "ovo"
    OVO
}

"Sort direction"
enum SortDirection {
    "Ascending"
    ASC
    "Descending"
    DESC
}

"Sort field"
enum SortField {
    "Availability"
    availability
    "Initial Payment"
    initialPayment
    "Initial Payment"
    initial_payment
    "Manufacturer Name"
    manufacturer
    "Mileage"
    mileage
    "Offer Ranking"
    offerRanking
    "Offer Ranking"
    offer_ranking
    "Rate"
    rate
    "Monthly Rental"
    rental
    "Term"
    term
}

enum VehicleTypeEnum {
    CAR
    LCV
}

"Input array of addresses create and add an Address"
input AddressHistoryInputObject {
    addresses: [AddressInputObject!]!
    partyId: ID!
}

"Input object to create and add an Address"
input AddressInputObject {
    city: String
    country: String
    county: String
    endedOn: Date
    kind: String
    lineOne: String
    lineThree: String
    lineTwo: String
    postcode: String
    propertyStatus: String
    serviceId: ID
    startedOn: Date
    uuid: ID
}

"Input object to create and add an Address"
input AddressV2InputObject {
    city: String!
    country: String
    county: String
    endedOn: Date
    kind: String
    lineOne: String!
    lineThree: String
    lineTwo: String
    postcode: String!
    propertyStatus: String
    serviceId: ID
    startedOn: Date
    uuid: ID
}

"Input object to create and add a Bank Account"
input BankAccountInputObject {
    accountName: String
    accountNumber: String
    bankName: String
    joinedAt: Date
    partyId: ID
    sortCode: String
    uuid: ID
}

"Input object to create and add a Bank Account"
input BankAccountV2InputObject {
    accountName: String
    accountNumber: String
    bankName: String
    joinedAt: Date
    joinedAtMonth: String
    joinedAtYear: String
    sortCode: String
    uuid: ID
}

"Filter object to search Body Styles"
input BodyStyleListFilterObject {
    fuelTypes: [String!]
    leaseType: LeaseTypeEnum
    manufacturerName: String
    manufacturerSlug: String
    onOffer: Boolean
    rangeName: String
    rangeSlug: String
    rate: RateInputObject
    transmissions: [String!]
    vehicleType: VehicleTypeEnum
}

"Input object to create a Charity Company"
input CharityCompanyInputObject {
    addresses: [AddressInputObject!]
    associates: [CompanyAssociateInputObject!]
    bankAccount: BankAccountInputObject
    companyNature: String
    companyNumber: String
    emailAddress: EmailAddressInputObject
    leadManagerId: ID
    legalName: String!
    otherCountriesOfActivity: [String!]
    telephoneNumbers: [TelephoneNumberInputObject!]
    tradesOutsideUk: Boolean
    tradingName: String
    tradingSince: Date
    turnoverOutsideUk: Float
    uuid: ID!
    vatNumber: String
    withTradingAddress: Boolean
}

"Input object to create bank account and direct debits as service"
input ClientWithDirectDebitInputObject {
    bankAccount: BankAccountInputObject!
    directDebit: DirectDebitInputType!
}

"Input object to create a Company Associate (Director, Partner etc.)"
input CompanyAssociateInputObject {
    addresses: [AddressInputObject!]
    businessShare: Float
    countryOfBirth: String
    dateOfBirth: Date
    emailAddress: EmailAddressInputObject
    emailConsent: Boolean
    firstName: String!
    gender: String
    incomeAndExpense: IncomeAndExpenseInputObject
    lastName: String!
    maritalStatus: String
    middleName: String
    nationality: String
    noOfAdultsInHousehold: String
    noOfDependants: String
    occupation: String
    profilingConsent: Boolean
    role: RoleInputObject
    smsConsent: Boolean
    termsAndConditions: Boolean
    title: String
    uuid: ID
}

"Input object to create a Company"
input CompanyInputObject {
    about: String
    addresses: [AddressInputObject!]
    annualExpenses: String
    annualSales: String
    annualTurnover: String
    companyNature: String
    companyNumber: String
    companyType: String
    deletedAt: Date
    emailAddresses: [EmailAddressInputObject!]
    leadManagerId: ID
    legalName: String
    monthlyAmountBeingReplaced: String
    otherCountriesOfActivity: String
    pictureUrl: String
    replaceExistingVehicleFinance: Boolean
    sicCode: String
    sicIndustry: String
    telephoneNumber: TelephoneNumberInputObject
    tradesOutsideUk: Boolean
    tradingName: String
    tradingSince: Date
    turnoverOutsideUk: Float
    uuid: ID
    vatNumber: String
    withTradingAddress: Boolean
}

"Input object to create and add a Credit Application"
input CreditApplicationInputObject {
    aboutDetails: Json
    "This field is now deprecated. Please use 'addressesV2' field instead."
    addresses: Json
    addressesV2: [AddressV2InputObject!]
    "This field is now deprecated. Please use 'bankAccountsV2' field instead."
    bankAccounts: Json
    bankAccountsV2: [BankAccountV2InputObject!]
    companyDetails: Json
    creditApplicationType: CreditApplicationTypeEnum
    directorsDetails: Json
    "This field is now deprecated. Please use 'EmploymentHistoryV2' field instead."
    employmentHistories: Json
    employmentHistoriesV2: [EmploymentHistoryV2InputObject!]
    financeType: String
    "This field is now deprecated. Please use 'incomeAndExpensesV2' field instead."
    incomeAndExpenses: Json
    incomeAndExpensesV2: IncomeAndExpenseV2InputObject
    leadManagerProposalId: ID
    orderUuid: ID!
    partnersDetails: Json
    soleTraderDetails: Json
    status: String
    submittedAt: DateTime
    vatDetails: Json
}

"Input object to create and add a Direct debit"
input DirectDebitInputType {
    addressId: ID
    bankAccountId: ID
    cancelNote: String
    cancelledBy: String
    communicationType: String
    customFields: Json
    customerReference: String
    dealId: ID
    entryDate: Date
    firstCollectionAmount: Float
    firstCollectionDate: Date
    frequency: Int
    lastCollectionAmount: Float
    mandateCloseDate: Date
    mandateReference: String!
    mandateType: String
    needCommunication: Boolean
    noOfCollections: Int
    notes: String
    oNEntryDate: Date
    regularCollectionAmount: Float
    regularCollectionDay: Int
    repeat: Boolean
    salesPersonName: String
    uuid: ID
}

"Input object to driving licence check object"
input DrivingLicenceCheckInputObject {
    base64EncodedLicence: String
    checkParams: Json
    checkReference: String
    checkedAt: DateTime
    dvlaReport: Json
    partyId: ID!
    s3Key: String
    scanResult: Json
    scannedAt: DateTime
    uuid: ID
}

"Input object to create and add an Email Address"
input EmailAddressInputObject {
    kind: String
    partyId: ID
    primary: Boolean
    uuid: ID
    value: String!
}

"Input object to create and add Employment Histories"
input EmploymentHistoryInputObject {
    employmentHistories: [EmploymentInputObject!]!
    partyId: ID!
    uuid: ID
}

"Input object to create and add an Employment History"
input EmploymentHistoryV2InputObject {
    companyAddressCity: String
    companyAddressCountry: String
    companyAddressLineOne: String
    companyAddressLineThree: String
    companyAddressLineTwo: String
    companyAddressPostcode: String
    companyAddressServiceId: String
    companyName: String
    contract: String
    employedSinceDate: Date
    employedUntilDate: Date
    employmentStatus: String
    grossAnnualIncome: Float
    jobTitle: String
    uuid: ID
    workPhoneNumber: String
}

"Input object to create and add an Employment History"
input EmploymentInputObject {
    companyAddressCity: String
    companyAddressCountry: String
    companyAddressLineOne: String
    companyAddressLineThree: String
    companyAddressLineTwo: String
    companyAddressPostcode: String
    companyAddressServiceId: String
    companyName: String
    contract: String
    employedSinceDate: Date
    employedUntilDate: Date
    employmentStatus: String
    grossAnnualIncome: Float
    jobTitle: String
    workPhoneNumber: String
}

"Search filters"
input FilterListObject {
    availability: Int
    bodyStyles: [String!]
    co2: [Int!]
    doors: [Int!]
    enginePowerBhp: [Int!]
    engineSizes: [Int!]
    financeTypes: [FinanceTypeEnum!]
    fuelTypes: [String!]
    height: [Float!]
    initialPayment: RateInputObject
    initialPeriods: [Int!]
    length: [Float!]
    lqBodyStyles: [String!]
    manufacturerName: String
    manufacturerSlug: String
    mileages: [Int!]
    modelName: String
    modelSlug: String
    mpgCombined: [Float!]
    noOfGears: [Int!]
    noOfSeats: [Int!]
    offerRanking: Int
    onOffer: Boolean
    rangeName: String
    rangeSlug: String
    rate: RateInputObject
    rental: RateInputObject
    terms: [Int!]
    transmissions: [String!]
    vehicleTypes: [VehicleTypeEnum!]
}

"Input object to create and add a FreeInsurance"
input FreeInsuranceInputObject {
    eligible: Boolean!
    optIn: Boolean!
}

"Input object to make full credit check"
input FullCreditCheckerInputObject {
    annualMileage: Int
    capId: ID
    creditApplicationUuid: ID!
    depositPayment: Float!
    lcvCapId: ID
    monthlyPayment: Float!
    orderUuid: ID
    partyId: ID!
    term: Int
    vehicleType: VehicleTypeEnum!
}

"Input object to get funder details"
input FunderInputObject {
    companiesHouseDirectors: Int!
    companyType: FunderCompanyTypeEnum!
    id: ID!
    percentageShares: Int
    userDirectors: Int
}

"Input object to create and add an Income And Expense"
input IncomeAndExpenseInputObject {
    annualIncome: Int
    anticipateMonthlyIncomeChange: Boolean
    averageMonthlyIncome: Int
    carFinance: Int
    creditCardPayments: Int
    foodAndClothes: Int
    fuel: Int
    futureMonthlyIncome: Int
    householdIncome: Int
    id: ID
    insurance: Int
    mortgageOrRent: Int
    otherCredit: Int
    partyId: ID
    phoneAndInternet: Int
    studentLoan: Int
    suitabilityConsent: Boolean
    utilities: Int
    withStudentLoan: Boolean
}

"Input object to create and add an Income And Expense"
input IncomeAndExpenseV2InputObject {
    annualIncome: Int
    anticipateMonthlyIncomeChange: Boolean
    averageMonthlyIncome: Int
    carFinance: Int
    creditCardPayments: Int
    foodAndClothes: Int
    fuel: Int
    futureMonthlyIncome: Int
    householdIncome: Int
    insurance: Int
    mortgageOrRent: Int
    otherCredit: Int
    phoneAndInternet: Int
    studentLoan: Int
    suitabilityConsent: Boolean
    utilities: Int
    uuid: ID
    withStudentLoan: Boolean
}

"Input object to create a Limited Company"
input LimitedCompanyInputObject {
    addresses: [AddressInputObject!]
    associates: [CompanyAssociateInputObject!]
    bankAccount: BankAccountInputObject
    companyNature: String
    companyNumber: String
    companyType: String
    emailAddress: EmailAddressInputObject
    isVatRegistered: Boolean
    leadManagerId: ID
    legalName: String
    otherCountriesOfActivity: [String!]
    person: PersonInputObject
    telephoneNumbers: [TelephoneNumberInputObject!]
    tradesOutsideUk: Boolean
    tradingName: String
    tradingSince: Date
    turnoverOutsideUk: Float
    turnoverPercentageOutsideUk: [TurnoverPercentageOutsideUkInputObject!]
    uuid: ID
    vatNumber: String
    withTradingAddress: Boolean
}

"Input object to create line item"
input LineItemInputObject {
    leadManagerQuoteId: ID
    orderId: ID
    quantity: Int!
    vehicleProduct: VehicleProductInputObject
}

"Filter object to search manufacturers"
input ManufacturerListFilterObject {
    bodyStyles: [String!]
    fuelTypes: [String!]
    leaseType: LeaseTypeEnum
    onOffer: Boolean
    rate: RateInputObject
    transmissions: [String!]
    vehicleType: VehicleTypeEnum
}

"Filter object to search Models"
input ModelListFilterObject {
    bodyStyles: [String!]
    fuelTypes: [String!]
    leaseType: LeaseTypeEnum
    manufacturerName: String
    manufacturerSlug: String
    onOffer: Boolean
    rangeName: String
    rangeSlug: String
    rate: RateInputObject
    transmissions: [String!]
    vehicleType: VehicleTypeEnum
}

"Input object to update my account section"
input MyAccountInputObject {
    emailConsent: Boolean
    firstName: String
    lastName: String
    personUuid: ID!
    serviceId: ID
    smsConsent: Boolean
    telephoneNumber: String
}

"Input object to create an Opportunity"
input OpportunityInputObject {
    capId: Int
    communicationsConsent: Boolean
    companyName: String
    email: String!
    fleetSize: Int
    fullName: String!
    opportunitySubtype: OpportunitySubtypeEnum
    opportunityType: OpportunityTypeEnum!
    phoneNumber: String!
    postcode: String
    privacyPolicy: Boolean
    termsAndConditions: Boolean
    vehicleType: String
}

"Input object to create an order"
input OrderInputObject {
    leaseType: LeaseTypeEnum!
    lineItems: [LineItemInputObject!]!
    partyUuid: ID
    personUuid: ID
    referenceNumber: String
    salesChannel: String
    uuid: ID
}

"Query pagination"
input PaginationInputObject {
    from: Int
    size: Int
}

"Input object to create a Partnership Company"
input PartnershipCompanyInputObject {
    addresses: [AddressInputObject!]
    annualExpenses: Float
    annualSalesCost: Float
    annualTurnover: Float
    associates: [CompanyAssociateInputObject!]
    bankAccount: BankAccountInputObject
    companyNature: String
    companyNumber: String
    companyType: String
    emailAddress: EmailAddressInputObject
    incomeAndExpense: IncomeAndExpenseInputObject
    isVatRegistered: Boolean
    leadManagerId: ID
    legalName: String
    monthlyAmountBeingReplaced: Float
    otherCountriesOfActivity: [String!]
    person: PersonInputObject
    replaceExistingVehicleFinance: Boolean
    telephoneNumbers: [TelephoneNumberInputObject!]
    tradesOutsideUk: Boolean
    tradingName: String
    tradingSince: Date
    turnoverOutsideUk: Float
    turnoverPercentageOutsideUk: [TurnoverPercentageOutsideUkInputObject!]
    uuid: ID
    vatNumber: String
    vehicleRegistrationNumber: String
}

"Input object to create a Person"
input PersonInputObject {
    about: String
    b2c: Boolean
    cognitoSub: ID
    company: CompanyInputObject
    countryOfBirth: String
    dateOfBirth: Date
    deletedAt: Date
    disabilityRegistered: Boolean
    emailAddress: EmailAddressInputObject
    emailConsent: Boolean
    firstName: String
    gender: String
    isApplicant: Boolean
    isDirector: Boolean
    jobTitle: String
    lastName: String
    leadManagerId: ID
    maritalStatus: String
    middleName: String
    nationality: String
    noOfAdultsInHousehold: String
    noOfDependants: String
    pictureUrl: String
    privacyPolicy: Boolean
    profilingConsent: Boolean
    role: RoleInputObject
    smsConsent: Boolean
    telephoneNumbers: [TelephoneNumberInputObject!]
    termsAndConditions: Boolean
    title: String
    tradingName: String
    uuid: ID
    vatRegistrationNumber: String
}

"Search filters"
input ProductFilterListInputObject {
    bodyStyles: [String!]
    financeTypes: FinanceTypeEnum
    fuelTypes: [String!]
    initialPayment: ProductFilterRangeListObject
    initialPeriods: [Int!]
    manufacturerName: String
    mileages: [Int!]
    modelName: String
    rangeName: String
    rental: ProductFilterRangeListObject
    terms: [Int!]
    transmissions: [String!]
    vehicleTypes: [VehicleTypeEnum!]
}

"Search filter range"
input ProductFilterRangeListObject {
    max: Float
    min: Float
}

"Input object to make quick credit check"
input QuickCreditCheckerInputObject {
    address: AddressInputObject
    addressServiceId: String
    emailAddress: EmailAddressInputObject!
    person: PersonInputObject!
}

"Filter object to search Ranges"
input RangeListFilterObject {
    bodyStyles: [String!]
    fuelTypes: [String!]
    leaseType: LeaseTypeEnum
    manufacturerName: String
    manufacturerSlug: String
    onOffer: Boolean
    rangeName: String
    rangeSlug: String
    rate: RateInputObject
    transmissions: [String!]
    vehicleType: VehicleTypeEnum
}

"Rate filter"
input RateInputObject {
    max: Float
    min: Float
}

"Input object to create and add a Role"
input RoleInputObject {
    companyId: Int
    personId: Int
    position: String
    primaryContact: Boolean
    uuid: ID
}

"Input object to create a Sole Trader Company"
input SoleTraderCompanyInputObject {
    addresses: [AddressInputObject!]
    annualExpenses: Float
    annualSalesCost: Float
    annualTurnover: Float
    associate: CompanyAssociateInputObject
    bankAccount: BankAccountInputObject
    companyNature: String
    companyNumber: String
    companyType: String
    emailAddress: EmailAddressInputObject
    isVatRegistered: Boolean
    leadManagerId: ID
    legalName: String
    monthlyAmountBeingReplaced: Float
    otherCountriesOfActivity: [String!]
    person: PersonInputObject
    replaceExistingVehicleFinance: Boolean
    telephoneNumbers: [TelephoneNumberInputObject!]
    tradesOutsideUk: Boolean
    tradingName: String
    tradingSince: Date
    turnoverOutsideUk: Float
    turnoverPercentageOutsideUk: [TurnoverPercentageOutsideUkInputObject!]
    uuid: ID
    vatNumber: String
    vehicleRegistrationNumber: String
}

"Sort object to order Es"
input SortObject {
    direction: SortDirection!
    field: SortField!
}

"Input object to create and add a Telephone Number"
input TelephoneNumberInputObject {
    kind: String
    partyId: ID
    primary: Boolean
    uuid: ID
    value: String!
}

"Input object for turnover percentage outside UK"
input TurnoverPercentageOutsideUkInputObject {
    country: String!
    percentage: Int!
}

"Input object to create a vehicle configuration"
input VehicleConfigurationInputObject {
    capDerivativeId: Int!
    vehicleType: VehicleTypeEnum!
}

"Filter object to search vehicles"
input VehicleListFilterObject {
    bodyStyles: [String!]
    derivativeIds: [ID!]
    fuelTypes: [String!]
    leaseType: LeaseTypeEnum
    manufacturerName: String
    manufacturerSlug: String
    modelName: String
    modelSlug: String
    onOffer: Boolean
    rangeName: String
    rangeSlug: String
    rate: RateInputObject
    transmissions: [String!]
    vehicleTypes: [VehicleTypeEnum!]
}

"Input object for vehicle product, eg: quote"
input VehicleProductInputObject {
    annualMileage: Int
    colour: String
    depositMonths: Int
    depositPayment: Float
    derivativeCapId: ID!
    description: String
    finalPayment: Float
    financeType: String
    freeInsurance: FreeInsuranceInputObject
    funderId: String
    leadTime: String
    maintenance: Boolean
    maintenancePrice: Float
    monthlyPayment: Float
    partnerSlug: PartnerSlugTypeEnum
    term: Int
    trim: String
    vehicleType: VehicleTypeEnum!
    vsku: String
}

input VehicleToCompare {
    capId: Int
    vehicleType: VehicleTypeEnum
}


scalar Date

scalar DateTime

scalar Json

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar JSONObject
